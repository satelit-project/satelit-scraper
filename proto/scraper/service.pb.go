// Code generated by protoc-gen-go. DO NOT EDIT.
// source: scraper/service.proto

package scraper

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("scraper/service.proto", fileDescriptor_12a110f2cce5d053) }

var fileDescriptor_12a110f2cce5d053 = []byte{
	// 222 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x8e, 0xbd, 0x4a, 0x04, 0x31,
	0x14, 0x85, 0xb1, 0x51, 0xb8, 0xba, 0x16, 0x77, 0x5d, 0x8b, 0xf8, 0x0e, 0x19, 0xd8, 0xad, 0x44,
	0xb0, 0x59, 0x14, 0xec, 0xc4, 0xb1, 0xb1, 0xcc, 0xae, 0xd7, 0x31, 0x4c, 0x26, 0x09, 0xc9, 0x1d,
	0xc1, 0xd7, 0xf3, 0xc9, 0x64, 0xf2, 0xb3, 0x30, 0xc5, 0x94, 0xf9, 0x72, 0xbe, 0x7b, 0x0e, 0x6c,
	0xe2, 0x31, 0x28, 0x4f, 0xa1, 0x89, 0x14, 0x7e, 0xf4, 0x91, 0xa4, 0x0f, 0x8e, 0x1d, 0x5e, 0x14,
	0x2c, 0xee, 0x3a, 0xe7, 0x3a, 0x43, 0x4d, 0xc2, 0x87, 0xf1, 0xab, 0xa1, 0xc1, 0xf3, 0x6f, 0x4e,
	0x09, 0xac, 0x32, 0xab, 0xd8, 0x17, 0x76, 0x53, 0x99, 0xb6, 0x4c, 0x96, 0x33, 0xdd, 0xbe, 0xc2,
	0x75, 0x9b, 0x79, 0x9b, 0x7b, 0xf0, 0x11, 0x56, 0x2d, 0xab, 0xc0, 0x09, 0x6b, 0xdb, 0xe1, 0x46,
	0x16, 0x53, 0xe6, 0xe4, 0x4b, 0xf2, 0xc5, 0xad, 0xcc, 0x0b, 0x64, 0x5d, 0x20, 0x9f, 0xa6, 0x05,
	0xdb, 0xbf, 0x33, 0x58, 0x97, 0x93, 0xef, 0x2a, 0xf6, 0xb1, 0xde, 0xdd, 0x01, 0xec, 0x03, 0x29,
	0xa6, 0x89, 0xe2, 0x82, 0x2d, 0x56, 0xa7, 0xb2, 0x14, 0xbb, 0x87, 0xcb, 0x0f, 0x4d, 0xe6, 0xf3,
	0x8d, 0xe2, 0x68, 0x18, 0x71, 0xf6, 0x9b, 0x7e, 0x96, 0x76, 0xe0, 0x03, 0x5c, 0xed, 0xdd, 0xe0,
	0x0d, 0x95, 0xc6, 0xf5, 0xcc, 0x7d, 0xd6, 0x56, 0xc7, 0xef, 0x25, 0xf9, 0x70, 0x9e, 0xde, 0xbb,
	0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x12, 0xbe, 0x84, 0xc2, 0x86, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ScraperServiceClient is the client API for ScraperService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ScraperServiceClient interface {
	// Starts scraping process
	StartScraping(ctx context.Context, in *ScrapeIntent, opts ...grpc.CallOption) (*empty.Empty, error)
}

type scraperServiceClient struct {
	cc *grpc.ClientConn
}

func NewScraperServiceClient(cc *grpc.ClientConn) ScraperServiceClient {
	return &scraperServiceClient{cc}
}

func (c *scraperServiceClient) StartScraping(ctx context.Context, in *ScrapeIntent, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/scraper.ScraperService/StartScraping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScraperServiceServer is the server API for ScraperService service.
type ScraperServiceServer interface {
	// Starts scraping process
	StartScraping(context.Context, *ScrapeIntent) (*empty.Empty, error)
}

// UnimplementedScraperServiceServer can be embedded to have forward compatible implementations.
type UnimplementedScraperServiceServer struct {
}

func (*UnimplementedScraperServiceServer) StartScraping(ctx context.Context, req *ScrapeIntent) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartScraping not implemented")
}

func RegisterScraperServiceServer(s *grpc.Server, srv ScraperServiceServer) {
	s.RegisterService(&_ScraperService_serviceDesc, srv)
}

func _ScraperService_StartScraping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScrapeIntent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScraperServiceServer).StartScraping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scraper.ScraperService/StartScraping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScraperServiceServer).StartScraping(ctx, req.(*ScrapeIntent))
	}
	return interceptor(ctx, in, info, handler)
}

var _ScraperService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scraper.ScraperService",
	HandlerType: (*ScraperServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartScraping",
			Handler:    _ScraperService_StartScraping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scraper/service.proto",
}

// ScraperTasksServiceClient is the client API for ScraperTasksService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ScraperTasksServiceClient interface {
	// Creates new scraping task and returns info about target to scrape
	CreateTask(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Task, error)
	// Reports that an atomic piece of data has been scraped
	YieldResult(ctx context.Context, in *TaskYield, opts ...grpc.CallOption) (*empty.Empty, error)
	// Reports that scraping has finished and no more work will be done
	CompleteTask(ctx context.Context, in *TaskFinish, opts ...grpc.CallOption) (*empty.Empty, error)
}

type scraperTasksServiceClient struct {
	cc *grpc.ClientConn
}

func NewScraperTasksServiceClient(cc *grpc.ClientConn) ScraperTasksServiceClient {
	return &scraperTasksServiceClient{cc}
}

func (c *scraperTasksServiceClient) CreateTask(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/scraper.ScraperTasksService/CreateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scraperTasksServiceClient) YieldResult(ctx context.Context, in *TaskYield, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/scraper.ScraperTasksService/YieldResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scraperTasksServiceClient) CompleteTask(ctx context.Context, in *TaskFinish, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/scraper.ScraperTasksService/CompleteTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScraperTasksServiceServer is the server API for ScraperTasksService service.
type ScraperTasksServiceServer interface {
	// Creates new scraping task and returns info about target to scrape
	CreateTask(context.Context, *empty.Empty) (*Task, error)
	// Reports that an atomic piece of data has been scraped
	YieldResult(context.Context, *TaskYield) (*empty.Empty, error)
	// Reports that scraping has finished and no more work will be done
	CompleteTask(context.Context, *TaskFinish) (*empty.Empty, error)
}

// UnimplementedScraperTasksServiceServer can be embedded to have forward compatible implementations.
type UnimplementedScraperTasksServiceServer struct {
}

func (*UnimplementedScraperTasksServiceServer) CreateTask(ctx context.Context, req *empty.Empty) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (*UnimplementedScraperTasksServiceServer) YieldResult(ctx context.Context, req *TaskYield) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method YieldResult not implemented")
}
func (*UnimplementedScraperTasksServiceServer) CompleteTask(ctx context.Context, req *TaskFinish) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteTask not implemented")
}

func RegisterScraperTasksServiceServer(s *grpc.Server, srv ScraperTasksServiceServer) {
	s.RegisterService(&_ScraperTasksService_serviceDesc, srv)
}

func _ScraperTasksService_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScraperTasksServiceServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scraper.ScraperTasksService/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScraperTasksServiceServer).CreateTask(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScraperTasksService_YieldResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskYield)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScraperTasksServiceServer).YieldResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scraper.ScraperTasksService/YieldResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScraperTasksServiceServer).YieldResult(ctx, req.(*TaskYield))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScraperTasksService_CompleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskFinish)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScraperTasksServiceServer).CompleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scraper.ScraperTasksService/CompleteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScraperTasksServiceServer).CompleteTask(ctx, req.(*TaskFinish))
	}
	return interceptor(ctx, in, info, handler)
}

var _ScraperTasksService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scraper.ScraperTasksService",
	HandlerType: (*ScraperTasksServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTask",
			Handler:    _ScraperTasksService_CreateTask_Handler,
		},
		{
			MethodName: "YieldResult",
			Handler:    _ScraperTasksService_YieldResult_Handler,
		},
		{
			MethodName: "CompleteTask",
			Handler:    _ScraperTasksService_CompleteTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scraper/service.proto",
}
