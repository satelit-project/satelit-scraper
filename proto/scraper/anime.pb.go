// Code generated by protoc-gen-go. DO NOT EDIT.
// source: scraper/anime.proto

package scraper

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Type of an anime episode
type Episode_Type int32

const (
	Episode_UNKNOWN Episode_Type = 0
	Episode_REGULAR Episode_Type = 1
	Episode_SPECIAL Episode_Type = 2
)

var Episode_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "REGULAR",
	2: "SPECIAL",
}

var Episode_Type_value = map[string]int32{
	"UNKNOWN": 0,
	"REGULAR": 1,
	"SPECIAL": 2,
}

func (x Episode_Type) String() string {
	return proto.EnumName(Episode_Type_name, int32(x))
}

func (Episode_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_39f12aeca5105638, []int{0, 0}
}

// Type of an anime title
type Anime_Type int32

const (
	Anime_UNKNOWN   Anime_Type = 0
	Anime_TV_SERIES Anime_Type = 1
	Anime_OVA       Anime_Type = 2
	Anime_ONA       Anime_Type = 3
	Anime_MOVIE     Anime_Type = 4
	Anime_SPECIAL   Anime_Type = 5
)

var Anime_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "TV_SERIES",
	2: "OVA",
	3: "ONA",
	4: "MOVIE",
	5: "SPECIAL",
}

var Anime_Type_value = map[string]int32{
	"UNKNOWN":   0,
	"TV_SERIES": 1,
	"OVA":       2,
	"ONA":       3,
	"MOVIE":     4,
	"SPECIAL":   5,
}

func (x Anime_Type) String() string {
	return proto.EnumName(Anime_Type_name, int32(x))
}

func (Anime_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_39f12aeca5105638, []int{1, 0}
}

// Anime episode
type Episode struct {
	// Episode type
	Type Episode_Type `protobuf:"varint,1,opt,name=type,proto3,enum=scraper.Episode_Type" json:"type,omitempty"`
	// Episode number
	Number int32 `protobuf:"zigzag32,2,opt,name=number,proto3" json:"number,omitempty"`
	// Episode name
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Episode duration in seconds
	Duration float64 `protobuf:"fixed64,4,opt,name=duration,proto3" json:"duration,omitempty"`
	// Timestamp of the episode air date (unix time)
	AirDate              float64  `protobuf:"fixed64,5,opt,name=air_date,json=airDate,proto3" json:"air_date,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Episode) Reset()         { *m = Episode{} }
func (m *Episode) String() string { return proto.CompactTextString(m) }
func (*Episode) ProtoMessage()    {}
func (*Episode) Descriptor() ([]byte, []int) {
	return fileDescriptor_39f12aeca5105638, []int{0}
}

func (m *Episode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Episode.Unmarshal(m, b)
}
func (m *Episode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Episode.Marshal(b, m, deterministic)
}
func (m *Episode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Episode.Merge(m, src)
}
func (m *Episode) XXX_Size() int {
	return xxx_messageInfo_Episode.Size(m)
}
func (m *Episode) XXX_DiscardUnknown() {
	xxx_messageInfo_Episode.DiscardUnknown(m)
}

var xxx_messageInfo_Episode proto.InternalMessageInfo

func (m *Episode) GetType() Episode_Type {
	if m != nil {
		return m.Type
	}
	return Episode_UNKNOWN
}

func (m *Episode) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *Episode) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Episode) GetDuration() float64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *Episode) GetAirDate() float64 {
	if m != nil {
		return m.AirDate
	}
	return 0
}

// Anime title
type Anime struct {
	// Anime ids in external databases
	Source *Anime_Source `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	// Anime type
	Type Anime_Type `protobuf:"varint,2,opt,name=type,proto3,enum=scraper.Anime_Type" json:"type,omitempty"`
	// Canonical anime title in romaji
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	// URL of the anime poster
	PosterUrl string `protobuf:"bytes,4,opt,name=poster_url,json=posterUrl,proto3" json:"poster_url,omitempty"`
	// Number of the anime episodes
	EpisodesCount int32 `protobuf:"zigzag32,5,opt,name=episodes_count,json=episodesCount,proto3" json:"episodes_count,omitempty"`
	// Known anime episodes info
	Episodes []*Episode `protobuf:"bytes,6,rep,name=episodes,proto3" json:"episodes,omitempty"`
	// Timestamp of the anime start air date (unix)
	StartDate float64 `protobuf:"fixed64,7,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// Timestamp of the anime end air date (unix)
	EndDate float64 `protobuf:"fixed64,8,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	// Anime tags (same as genre in some external sources)
	Tags []*Anime_Tag `protobuf:"bytes,9,rep,name=tags,proto3" json:"tags,omitempty"`
	// Anime rating
	Rating float64 `protobuf:"fixed64,10,opt,name=rating,proto3" json:"rating,omitempty"`
	// Anime description
	Description          string   `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Anime) Reset()         { *m = Anime{} }
func (m *Anime) String() string { return proto.CompactTextString(m) }
func (*Anime) ProtoMessage()    {}
func (*Anime) Descriptor() ([]byte, []int) {
	return fileDescriptor_39f12aeca5105638, []int{1}
}

func (m *Anime) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Anime.Unmarshal(m, b)
}
func (m *Anime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Anime.Marshal(b, m, deterministic)
}
func (m *Anime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Anime.Merge(m, src)
}
func (m *Anime) XXX_Size() int {
	return xxx_messageInfo_Anime.Size(m)
}
func (m *Anime) XXX_DiscardUnknown() {
	xxx_messageInfo_Anime.DiscardUnknown(m)
}

var xxx_messageInfo_Anime proto.InternalMessageInfo

func (m *Anime) GetSource() *Anime_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *Anime) GetType() Anime_Type {
	if m != nil {
		return m.Type
	}
	return Anime_UNKNOWN
}

func (m *Anime) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Anime) GetPosterUrl() string {
	if m != nil {
		return m.PosterUrl
	}
	return ""
}

func (m *Anime) GetEpisodesCount() int32 {
	if m != nil {
		return m.EpisodesCount
	}
	return 0
}

func (m *Anime) GetEpisodes() []*Episode {
	if m != nil {
		return m.Episodes
	}
	return nil
}

func (m *Anime) GetStartDate() float64 {
	if m != nil {
		return m.StartDate
	}
	return 0
}

func (m *Anime) GetEndDate() float64 {
	if m != nil {
		return m.EndDate
	}
	return 0
}

func (m *Anime) GetTags() []*Anime_Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Anime) GetRating() float64 {
	if m != nil {
		return m.Rating
	}
	return 0
}

func (m *Anime) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// External DB location
type Anime_Source struct {
	// AniDB id
	AnidbId []int32 `protobuf:"zigzag32,1,rep,packed,name=anidb_id,json=anidbId,proto3" json:"anidb_id,omitempty"`
	// MyAnimeList id
	MalId []int32 `protobuf:"zigzag32,2,rep,packed,name=mal_id,json=malId,proto3" json:"mal_id,omitempty"`
	// AnimeNewsNetwork id
	AnnId                []int32  `protobuf:"zigzag32,3,rep,packed,name=ann_id,json=annId,proto3" json:"ann_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Anime_Source) Reset()         { *m = Anime_Source{} }
func (m *Anime_Source) String() string { return proto.CompactTextString(m) }
func (*Anime_Source) ProtoMessage()    {}
func (*Anime_Source) Descriptor() ([]byte, []int) {
	return fileDescriptor_39f12aeca5105638, []int{1, 0}
}

func (m *Anime_Source) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Anime_Source.Unmarshal(m, b)
}
func (m *Anime_Source) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Anime_Source.Marshal(b, m, deterministic)
}
func (m *Anime_Source) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Anime_Source.Merge(m, src)
}
func (m *Anime_Source) XXX_Size() int {
	return xxx_messageInfo_Anime_Source.Size(m)
}
func (m *Anime_Source) XXX_DiscardUnknown() {
	xxx_messageInfo_Anime_Source.DiscardUnknown(m)
}

var xxx_messageInfo_Anime_Source proto.InternalMessageInfo

func (m *Anime_Source) GetAnidbId() []int32 {
	if m != nil {
		return m.AnidbId
	}
	return nil
}

func (m *Anime_Source) GetMalId() []int32 {
	if m != nil {
		return m.MalId
	}
	return nil
}

func (m *Anime_Source) GetAnnId() []int32 {
	if m != nil {
		return m.AnnId
	}
	return nil
}

// Anime tag
type Anime_Tag struct {
	// Tag id in external db
	//
	// Types that are valid to be assigned to Source:
	//	*Anime_Tag_AnidbId
	Source isAnime_Tag_Source `protobuf_oneof:"source"`
	// Tag name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Tag description
	Description          string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Anime_Tag) Reset()         { *m = Anime_Tag{} }
func (m *Anime_Tag) String() string { return proto.CompactTextString(m) }
func (*Anime_Tag) ProtoMessage()    {}
func (*Anime_Tag) Descriptor() ([]byte, []int) {
	return fileDescriptor_39f12aeca5105638, []int{1, 1}
}

func (m *Anime_Tag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Anime_Tag.Unmarshal(m, b)
}
func (m *Anime_Tag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Anime_Tag.Marshal(b, m, deterministic)
}
func (m *Anime_Tag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Anime_Tag.Merge(m, src)
}
func (m *Anime_Tag) XXX_Size() int {
	return xxx_messageInfo_Anime_Tag.Size(m)
}
func (m *Anime_Tag) XXX_DiscardUnknown() {
	xxx_messageInfo_Anime_Tag.DiscardUnknown(m)
}

var xxx_messageInfo_Anime_Tag proto.InternalMessageInfo

type isAnime_Tag_Source interface {
	isAnime_Tag_Source()
}

type Anime_Tag_AnidbId struct {
	AnidbId int32 `protobuf:"zigzag32,10,opt,name=anidb_id,json=anidbId,proto3,oneof"`
}

func (*Anime_Tag_AnidbId) isAnime_Tag_Source() {}

func (m *Anime_Tag) GetSource() isAnime_Tag_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *Anime_Tag) GetAnidbId() int32 {
	if x, ok := m.GetSource().(*Anime_Tag_AnidbId); ok {
		return x.AnidbId
	}
	return 0
}

func (m *Anime_Tag) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Anime_Tag) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Anime_Tag) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Anime_Tag_AnidbId)(nil),
	}
}

func init() {
	proto.RegisterEnum("scraper.Episode_Type", Episode_Type_name, Episode_Type_value)
	proto.RegisterEnum("scraper.Anime_Type", Anime_Type_name, Anime_Type_value)
	proto.RegisterType((*Episode)(nil), "scraper.Episode")
	proto.RegisterType((*Anime)(nil), "scraper.Anime")
	proto.RegisterType((*Anime_Source)(nil), "scraper.Anime.Source")
	proto.RegisterType((*Anime_Tag)(nil), "scraper.Anime.Tag")
}

func init() { proto.RegisterFile("scraper/anime.proto", fileDescriptor_39f12aeca5105638) }

var fileDescriptor_39f12aeca5105638 = []byte{
	// 509 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x53, 0xed, 0x8a, 0xd3, 0x40,
	0x14, 0xdd, 0xc9, 0x67, 0x73, 0xcb, 0x2e, 0xe9, 0xac, 0x2b, 0xb1, 0x22, 0x84, 0x82, 0x1a, 0xc1,
	0xad, 0xb0, 0x3e, 0x41, 0x5d, 0x83, 0x16, 0x6b, 0xab, 0xd3, 0x0f, 0x7f, 0x96, 0x69, 0x33, 0x94,
	0x40, 0x3b, 0x09, 0x93, 0xe9, 0x8f, 0x7d, 0x05, 0x1f, 0xcc, 0xe7, 0x92, 0xb9, 0x49, 0xd7, 0x50,
	0xf7, 0x5f, 0xce, 0x39, 0x97, 0xb9, 0xf7, 0x9c, 0x7b, 0x03, 0xd7, 0xd5, 0x56, 0xf1, 0x52, 0xa8,
	0x0f, 0x5c, 0xe6, 0x07, 0x31, 0x2c, 0x55, 0xa1, 0x0b, 0xea, 0x37, 0xe4, 0xe0, 0x0f, 0x01, 0x3f,
	0x2d, 0xf3, 0xaa, 0xc8, 0x04, 0x7d, 0x07, 0x8e, 0x7e, 0x28, 0x45, 0x44, 0x62, 0x92, 0x5c, 0xdd,
	0xdd, 0x0c, 0x9b, 0x9a, 0x61, 0xa3, 0x0f, 0x17, 0x0f, 0xa5, 0x60, 0x58, 0x42, 0x9f, 0x83, 0x27,
	0x8f, 0x87, 0x8d, 0x50, 0x91, 0x15, 0x93, 0xa4, 0xc7, 0x1a, 0x44, 0x29, 0x38, 0x92, 0x1f, 0x44,
	0x64, 0xc7, 0x24, 0x09, 0x18, 0x7e, 0xd3, 0x3e, 0x74, 0xb2, 0xa3, 0xe2, 0x3a, 0x2f, 0x64, 0xe4,
	0xc4, 0x24, 0x21, 0xec, 0x11, 0xd3, 0x17, 0xd0, 0xe1, 0xb9, 0x5a, 0x67, 0x5c, 0x8b, 0xc8, 0x45,
	0xcd, 0xe7, 0xb9, 0xfa, 0xcc, 0xb5, 0x18, 0xdc, 0x82, 0x63, 0x1a, 0xd2, 0x2e, 0xf8, 0xcb, 0xe9,
	0xb7, 0xe9, 0xec, 0xd7, 0x34, 0xbc, 0x30, 0x80, 0xa5, 0x5f, 0x96, 0x93, 0x11, 0x0b, 0x89, 0x01,
	0xf3, 0x1f, 0xe9, 0xfd, 0x78, 0x34, 0x09, 0xad, 0xc1, 0x6f, 0x17, 0xdc, 0x91, 0x71, 0x48, 0x6f,
	0xc1, 0xab, 0x8a, 0xa3, 0xda, 0xd6, 0x46, 0xba, 0x2d, 0x23, 0xa8, 0x0f, 0xe7, 0x28, 0xb2, 0xa6,
	0x88, 0xbe, 0x6d, 0x5c, 0x5b, 0xe8, 0xfa, 0xfa, 0xac, 0xb8, 0xe5, 0xf9, 0x19, 0xb8, 0x3a, 0xd7,
	0xfb, 0x93, 0xb9, 0x1a, 0xd0, 0x57, 0x00, 0x65, 0x51, 0x69, 0xa1, 0xd6, 0x47, 0xb5, 0x47, 0x7f,
	0x01, 0x0b, 0x6a, 0x66, 0xa9, 0xf6, 0xf4, 0x35, 0x5c, 0x89, 0x3a, 0xbe, 0x6a, 0xbd, 0x2d, 0x8e,
	0x52, 0xa3, 0xcd, 0x1e, 0xbb, 0x3c, 0xb1, 0xf7, 0x86, 0xa4, 0xef, 0xa1, 0x73, 0x22, 0x22, 0x2f,
	0xb6, 0x93, 0xee, 0x5d, 0x78, 0x1e, 0x3f, 0x7b, 0xac, 0x30, 0x3d, 0x2b, 0xcd, 0x95, 0xae, 0x73,
	0xf3, 0x31, 0xb7, 0x00, 0x19, 0x93, 0x9c, 0x09, 0x55, 0xc8, 0xac, 0x16, 0x3b, 0x75, 0xa8, 0x42,
	0x66, 0x28, 0xbd, 0x01, 0x47, 0xf3, 0x5d, 0x15, 0x05, 0xd8, 0x83, 0x9e, 0x9b, 0xe5, 0x3b, 0x86,
	0xba, 0xd9, 0xaf, 0xd9, 0x90, 0xdc, 0x45, 0x80, 0x0f, 0x34, 0x88, 0xc6, 0xd0, 0xcd, 0x44, 0xb5,
	0x55, 0x79, 0x89, 0xeb, 0xec, 0xa2, 0xdd, 0x36, 0xd5, 0xff, 0x09, 0x5e, 0x1d, 0x30, 0xee, 0x56,
	0xe6, 0xd9, 0x66, 0x9d, 0x67, 0x11, 0x89, 0xed, 0xa4, 0xc7, 0x7c, 0xc4, 0xe3, 0x8c, 0xde, 0x80,
	0x77, 0xe0, 0x7b, 0x23, 0x58, 0x28, 0xb8, 0x07, 0xbe, 0xaf, 0x69, 0x2e, 0xa5, 0xa1, 0xed, 0x9a,
	0xe6, 0x52, 0x8e, 0xb3, 0xfe, 0x06, 0xec, 0x05, 0xdf, 0xd1, 0x97, 0xad, 0xf7, 0xcc, 0x54, 0xbd,
	0xaf, 0x17, 0xff, 0x5e, 0x3c, 0x1d, 0x1e, 0x69, 0x1d, 0xde, 0xd9, 0xb0, 0xd6, 0x7f, 0xc3, 0x7e,
	0xea, 0x9c, 0x4e, 0x65, 0x30, 0x79, 0xea, 0xda, 0x2e, 0x21, 0x58, 0xac, 0xd6, 0xf3, 0x94, 0x8d,
	0xd3, 0x79, 0x48, 0xa8, 0x0f, 0xf6, 0x6c, 0x35, 0x0a, 0x2d, 0xfc, 0x98, 0x8e, 0x42, 0x9b, 0x06,
	0xe0, 0x7e, 0x9f, 0xad, 0xc6, 0x69, 0xe8, 0xb4, 0x8f, 0xd1, 0xdd, 0x78, 0xf8, 0x97, 0x7d, 0xfc,
	0x1b, 0x00, 0x00, 0xff, 0xff, 0xd1, 0xdf, 0x87, 0x00, 0x7c, 0x03, 0x00, 0x00,
}
