// Code generated by protoc-gen-go. DO NOT EDIT.
// source: scheduler/service.proto

package scheduler

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("scheduler/service.proto", fileDescriptor_4c469cefae316aa3) }

var fileDescriptor_4c469cefae316aa3 = []byte{
	// 175 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x8d, 0xbd, 0x0e, 0x82, 0x40,
	0x10, 0x84, 0x3b, 0x13, 0xcf, 0x68, 0x71, 0x05, 0x24, 0x18, 0x5f, 0x61, 0x49, 0xb0, 0xb7, 0xf3,
	0x87, 0xca, 0x44, 0x6a, 0x0b, 0x81, 0x15, 0x2e, 0x02, 0x4b, 0xee, 0x16, 0x13, 0xdf, 0xde, 0x78,
	0x1b, 0xb0, 0xa2, 0xdc, 0x6f, 0x67, 0xbe, 0x51, 0xa1, 0x2b, 0x6a, 0x2c, 0x87, 0x06, 0x6d, 0xec,
	0xd0, 0xbe, 0x4d, 0x81, 0xd0, 0x5b, 0x62, 0xd2, 0xcb, 0xe9, 0x11, 0x6d, 0x2b, 0xa2, 0xaa, 0xc1,
	0xd8, 0x3f, 0xf2, 0xe1, 0x19, 0x63, 0xdb, 0xf3, 0x47, 0x72, 0x51, 0xf0, 0x17, 0x98, 0x8e, 0xb1,
	0x63, 0xe1, 0xc9, 0x55, 0xad, 0xd3, 0xb6, 0x27, 0xcb, 0x99, 0x68, 0xf5, 0x41, 0xad, 0x32, 0x7e,
	0x58, 0x16, 0xaa, 0x43, 0x98, 0x8a, 0x20, 0x28, 0xf5, 0xf5, 0x28, 0x00, 0x99, 0x83, 0x71, 0x0e,
	0x8e, 0xbf, 0xb9, 0xe4, 0xae, 0xb4, 0xe4, 0x2e, 0x44, 0x2f, 0x37, 0x5a, 0xcf, 0x6a, 0x23, 0xf4,
	0x64, 0x3a, 0xe3, 0x6a, 0x2c, 0xf5, 0x6e, 0x46, 0x7c, 0x43, 0x37, 0x34, 0xb3, 0xfa, 0x7c, 0xe1,
	0xef, 0xfd, 0x37, 0x00, 0x00, 0xff, 0xff, 0xae, 0xd9, 0xd5, 0x02, 0x11, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ImportServiceClient is the client API for ImportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ImportServiceClient interface {
	// Begins import process of raw data
	StartImport(ctx context.Context, in *ImportIntent, opts ...grpc.CallOption) (*empty.Empty, error)
}

type importServiceClient struct {
	cc *grpc.ClientConn
}

func NewImportServiceClient(cc *grpc.ClientConn) ImportServiceClient {
	return &importServiceClient{cc}
}

func (c *importServiceClient) StartImport(ctx context.Context, in *ImportIntent, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/scheduler.ImportService/StartImport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImportServiceServer is the server API for ImportService service.
type ImportServiceServer interface {
	// Begins import process of raw data
	StartImport(context.Context, *ImportIntent) (*empty.Empty, error)
}

// UnimplementedImportServiceServer can be embedded to have forward compatible implementations.
type UnimplementedImportServiceServer struct {
}

func (*UnimplementedImportServiceServer) StartImport(ctx context.Context, req *ImportIntent) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartImport not implemented")
}

func RegisterImportServiceServer(s *grpc.Server, srv ImportServiceServer) {
	s.RegisterService(&_ImportService_serviceDesc, srv)
}

func _ImportService_StartImport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportIntent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImportServiceServer).StartImport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.ImportService/StartImport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImportServiceServer).StartImport(ctx, req.(*ImportIntent))
	}
	return interceptor(ctx, in, info, handler)
}

var _ImportService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scheduler.ImportService",
	HandlerType: (*ImportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartImport",
			Handler:    _ImportService_StartImport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scheduler/service.proto",
}

// ImportHooksServiceClient is the client API for ImportHooksService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ImportHooksServiceClient interface {
	// Reports that import has finished
	ImportFinished(ctx context.Context, in *ImportIntentResult, opts ...grpc.CallOption) (*empty.Empty, error)
}

type importHooksServiceClient struct {
	cc *grpc.ClientConn
}

func NewImportHooksServiceClient(cc *grpc.ClientConn) ImportHooksServiceClient {
	return &importHooksServiceClient{cc}
}

func (c *importHooksServiceClient) ImportFinished(ctx context.Context, in *ImportIntentResult, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/scheduler.ImportHooksService/ImportFinished", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImportHooksServiceServer is the server API for ImportHooksService service.
type ImportHooksServiceServer interface {
	// Reports that import has finished
	ImportFinished(context.Context, *ImportIntentResult) (*empty.Empty, error)
}

// UnimplementedImportHooksServiceServer can be embedded to have forward compatible implementations.
type UnimplementedImportHooksServiceServer struct {
}

func (*UnimplementedImportHooksServiceServer) ImportFinished(ctx context.Context, req *ImportIntentResult) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportFinished not implemented")
}

func RegisterImportHooksServiceServer(s *grpc.Server, srv ImportHooksServiceServer) {
	s.RegisterService(&_ImportHooksService_serviceDesc, srv)
}

func _ImportHooksService_ImportFinished_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportIntentResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImportHooksServiceServer).ImportFinished(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.ImportHooksService/ImportFinished",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImportHooksServiceServer).ImportFinished(ctx, req.(*ImportIntentResult))
	}
	return interceptor(ctx, in, info, handler)
}

var _ImportHooksService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scheduler.ImportHooksService",
	HandlerType: (*ImportHooksServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportFinished",
			Handler:    _ImportHooksService_ImportFinished_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scheduler/service.proto",
}
